


  <div id="container">
    <header>
    </header>
    <div id="main" role="main">

      <!--
        These are our filter options. The "data-filter" classes are used to identify which
        grid items to show.
        -->
      <ol id="filters">
        <li data-filter="telecoms">Telecoms</li>
        <li data-filter="test">Test</li>
        <li data-filter="london">London</li>
        <li data-filter="paris">Paris</li>
        <li data-filter="berlin">Berlin</li>
        <li data-filter="sport">Sport</li>
        <li data-filter="fashion">Fashion</li>
        <li data-filter="video">Video</li>
        <li data-filter="art">Art</li>
      </ol>



      <ul id="tiles">
        <!--
          These are our grid items. Notice how each one has classes assigned that
          are used for filtering. The classes match the "data-filter" properties above.
        -->
        <% @posts.each do |post| %>
        <li class="<%=post.tags %> art">
          <div class="bodytext">
         <h4><%= post.contentSummary[0,10]%></h4>   
            <p><%= post.contentSummary[0,200] %><b><%= link_to 'find out more', post %></b></p><br>
          </div>
          <div class="industrycolour" style="background-color:#347ec7;padding-top:5px">
            <!-- USE A CASE STATEMENT HERE TO SELECT COLOUR BY TAG-->
            </div>
            <div class="opboxspacer">
              
              <div class="opboxspacerleft">
           <p> Interest: <%= post.score %> </p>
         </div>
         <div class="opboxspacerright">

    <%= link_to image_tag("/images/arrow-up.png"), :method => "post", :action => 'up_vote', :id => post.id %>
    <!-- CALL THE REARANGING METHODS AND STOP IT REFRESHING! -->
    <%= link_to image_tag("/images/arrow-down.png"), :method => "post", :action => 'down_vote', :id => post.id %>
    <%= link_to image_tag("/images/remove.png"), :method => "post", :action => 'junk', :id => post.id %>
  </div>

            </div> <!-- opboxspace-->
       </li>
       <%end%>



        <!-- End of grid blocks -->
      </ul>

    </div>
    <footer>

    </footer>
  </div>



  <!-- Once the page is loaded, initalize the plug-in. -->
  <script type="text/javascript">
    $(document).ready(new function() {
      // This filter is later used as the selector for which grid items to show.
      var filter = '', handler;

      // Prepare layout options.
      var options = {
        autoResize: true, // This will auto-update the layout when the browser window is resized.
        container: $('#main'), // Optional, used for some extra CSS styling
        offset: 20, // Optional, the distance between grid items
        //itemWidth: 310 // Optional, the width of a grid item
      };

      // This function filters the grid when a change is made.
      var refresh = function() {
        // This hides all grid items ("inactive" is a CSS class that sets opacity to 0).
        $('#tiles li').addClass('inactive');

        // Create a new layout selector with our filter.
        handler = $(filter);

        // This shows the items we want visible.
        handler.removeClass("inactive");

        // This updates the layout.
        handler.wookmark(options);
      }

      /**
       * This function checks all filter options to see which ones are active.
       * If they have changed, it also calls a refresh (see above).
       */
      var updateFilters = function() {
        var oldFilter = filter,
            filters = [];

        // Collect filter list.
        var items = $('#filters li'),
            i = 0, length = items.length, item;

        for(; i < length; i++) {
          item = items.eq(i);
          if(item.hasClass('active')) {
            filters.push('#tiles li.' + item.attr('data-filter'));
          }
        }

        // If no filters active, set default to show all.
        if (filters.length == 0) {
          filters.push('#tiles li');
        }

        // Finalize our filter selector for jQuery.
        filter = filters.join(', ');

        // If the filter has changed, update the layout.
        if(oldFilter != filter) {
          refresh();
        }
      };

      /**
       * When a filter is clicked, toggle it's active state and refresh.
       */
      var onClickFilter = function(event) {
        $('#filters li').removeClass('active');
        $(event.currentTarget).toggleClass('active');
        updateFilters();
      }

      // Capture filter click events.
      $('#filters li').click(onClickFilter);

      // Do initial update (shows all items).
      updateFilters();
    });
  </script>

        













 




